//insperation von https://www.javaworld.com/article/2077561/learn-java/java-tip-60--saving-bitmap-files-in-java.html
import java.io.*;
import java.io.BufferedReader;
public class Parser{
    private static int bitHeaderL = 14;
    private static int bitInfoHeaderL = 40;
    private static byte bitHeder [] = new byte[bitHeaderL];
    private static byte bitType[] = {'B','M'};
    private static int bitSize = 0;
    private static int reserved1 = 0;
    private static int reserved2 = 0;
    private static int ofToImg = bitHeaderL + bitInfoHeaderL;
    private static int biWidth = LainFuckM.DIAM;
    private static int biHeight = LainFuckM.DIAM;
    private static int biplane = 1;
    private static int biBits = 24;
    private static int bicomp = 0;
    private static int biSize = 3*biWidth*biHeight;
    private static int pixM = 0;
    private static int piyM = 0;
    private static int biCir = 0;
    private static int biCirI = 0;
    private static FileOutputStream fo;
  public static String parse(int [][][]mat, int aktL, String path){
    String erg; 
    try{
      fo = new FileOutputStream(path);
      save(mat,aktL);  
      fo.close();
      erg = "succseful saved to "+path;
    }catch(Exception e){
      erg = "cant save an error has acured";  
    };
    return erg; 
  };  
  private static void save(int [][][] mat, int aktL)throws Exception{
     int pad = (4-((LainFuckM.DIAM*3)%4));
     if(pad == 4){
       pad = 0;  
     };
     pad *= LainFuckM.DIAM; 
     biSize += pad;
     bitSize = biSize +  bitInfoHeaderL + bitHeaderL;
     writeBitHeader(); 
     writeBitInfHeader(); 
     writeBitMap(mat,aktL);
  };
  private static void writeBitHeader()throws Exception{
    fo.write(bitType);
    fo.write(iToD(bitSize));
    fo.write(iToW(reserved1));
    fo.write(iToW(reserved1));
    fo.write(iToD(ofToImg));
  };
  private static void writeBitInfHeader()throws Exception{
    fo.write(iToD(bitInfoHeaderL));  
    fo.write(iToD(biWidth));  
    fo.write(iToD(biHeight));  
    fo.write(iToW(biplane));  
    fo.write(iToW(biBits));  
    fo.write(iToD(bicomp));  
    fo.write(iToD(biSize));  
    fo.write(iToD(pixM));  
    fo.write(iToD(piyM));  
    fo.write(iToD(biCir));  
    fo.write(iToD(biCirI));  
  };
  private static byte[] iToW(int v){
    byte []erg = new byte[2];
    erg[0] = (byte)(v&0x00FF);
    erg[1] = (byte)(v&0xFF00);
    return erg; 
  };
  private static byte[] iToD(int v){
    byte [] erg = new byte[4];  
    erg[0] = (byte)(v&0xFF);
    erg[1] = (byte)(v&0xFF00);
    erg[2] = (byte)(v&0xFF0000);
    erg[3] = (byte)(v&0xFF000000);
    return erg;
  };
  private static void writeBitMap(int [][][] mat,int aktL)throws Exception{
    int [] bitmap = new int[LainFuckM.DIAM*LainFuckM.DIAM];
    for(int i = 0;i<LainFuckM.DIAM;i++){
      for(int j = 0;j<LainFuckM.DIAM;j++){
        bitmap[j*LainFuckM.DIAM+i] = mat[i][j][aktL];    
      };	
    };
    byte rgb[] = new byte[3]; 
    int size = biWidth * biHeight - 1;
    int value;
    for(int j = biHeight-1;j>=0;j--){
      for(int i = 0;i<biWidth;i++){
	value = bitmap[j*biHeight + i]%8;
	rgb[2] = (byte)((value&0x4)== 4 ? 0xFF : 0x00);  
	rgb[1] = (byte)((value&0x2) == 2 ? 0xFF : 0x00);  















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































	rgb[0] = (byte)((value&0x1) == 1 ? 0xFF : 0x00);  
	fo.write(rgb);
      };
    };
  };
  public static String loadF(String path){
    String erg;
    String line;
    try{
      BufferedReader b = new BufferedReader(new FileReader(path));
      line = b.readLine(); 
      erg = line;
      while(line != null){
	line = b.readLine();
	if(line != null){
	  erg += line;  
	};
      };
      b.close();


















    }catch(Exception e){
      erg = null; 
    };  
    return erg;
  };
};
